from flask_mail import Message
from app import mail
import smtplib
import logging
from datetime import datetime
import json
import os

class NotificationService:
    def __init__(self):
        self.email_enabled = self._check_email_config()
        
    def _check_email_config(self):
        """Check if email configuration is available"""
        return bool(os.environ.get('MAIL_USERNAME') and os.environ.get('MAIL_PASSWORD'))
    
    def send_price_alert(self, user_email, ticker, current_price, target_price, condition):
        """Send price alert notification"""
        try:
            if not self.email_enabled:
                logging.warning("Email not configured, skipping price alert notification")
                return False
            
            subject = f"FullStock AI Price Alert: {ticker}"
            
            if condition == 'above':
                message_text = f"{ticker} has reached ${current_price:.2f}, which is above your target of ${target_price:.2f}"
            else:
                message_text = f"{ticker} has dropped to ${current_price:.2f}, which is below your target of ${target_price:.2f}"
            
            body = f"""
            Price Alert Triggered!
            
            Symbol: {ticker}
            Current Price: ${current_price:.2f}
            Target Price: ${target_price:.2f}
            Condition: {condition}
            
            {message_text}
            
            Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            
            This alert was generated by FullStock AI vNext Ultimate.
            """
            
            return self._send_email(user_email, subject, body)
            
        except Exception as e:
            logging.error(f"Price alert notification error: {str(e)}")
            return False
    
    def send_prediction_alert(self, user_email, ticker, prediction_data, confidence_threshold=80):
        """Send high-confidence prediction alert"""
        try:
            if not self.email_enabled:
                return False
                
            confidence = prediction_data.get('confidence', 0)
            if confidence < confidence_threshold:
                return False  # Don't send low-confidence predictions
            
            predicted_price = prediction_data.get('predicted_price', 0)
            current_price = prediction_data.get('current_price', 0)
            price_change = prediction_data.get('price_change_percent', 0)
            model_type = prediction_data.get('model_type', 'Unknown')
            
            subject = f"FullStock AI High-Confidence Prediction: {ticker}"
            
            direction = "increase" if price_change > 0 else "decrease"
            
            body = f"""
            High-Confidence Prediction Alert!
            
            Symbol: {ticker}
            Current Price: ${current_price:.2f}
            Predicted Price: ${predicted_price:.2f}
            Expected Change: {price_change:+.1f}%
            Confidence Level: {confidence:.1f}%
            Model: {model_type}
            
            Our AI model predicts a {direction} of {abs(price_change):.1f}% with {confidence:.1f}% confidence.
            
            Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            
            This prediction was generated by FullStock AI vNext Ultimate.
            
            Disclaimer: This is for informational purposes only and not financial advice.
            """
            
            return self._send_email(user_email, subject, body)
            
        except Exception as e:
            logging.error(f"Prediction alert notification error: {str(e)}")
            return False
    
    def send_portfolio_alert(self, user_email, portfolio_data):
        """Send portfolio performance alert"""
        try:
            if not self.email_enabled:
                return False
            
            total_pnl_percent = portfolio_data.get('total_pnl_percent', 0)
            total_value = portfolio_data.get('total_value', 0)
            total_pnl = portfolio_data.get('total_pnl', 0)
            
            # Only send if significant change (>5% or >$1000)
            if abs(total_pnl_percent) < 5 and abs(total_pnl) < 1000:
                return False
            
            subject = f"FullStock AI Portfolio Update: {total_pnl_percent:+.1f}%"
            
            performance_text = "gained" if total_pnl > 0 else "lost"
            
            body = f"""
            Portfolio Performance Update
            
            Total Portfolio Value: ${total_value:,.2f}
            Total P&L: ${total_pnl:+,.2f} ({total_pnl_percent:+.1f}%)
            
            Your portfolio has {performance_text} {abs(total_pnl_percent):.1f}% since last update.
            
            Top Performers:
            """
            
            # Add top 3 positions
            positions = portfolio_data.get('positions', [])
            sorted_positions = sorted(positions, key=lambda x: x.get('unrealized_pnl_percent', 0), reverse=True)
            
            for i, position in enumerate(sorted_positions[:3]):
                symbol = position.get('symbol', '')
                pnl_percent = position.get('unrealized_pnl_percent', 0)
                body += f"\n{i+1}. {symbol}: {pnl_percent:+.1f}%"
            
            body += f"""
            
            Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            
            This update was generated by FullStock AI vNext Ultimate.
            
            Disclaimer: This is for informational purposes only and not financial advice.
            """
            
            return self._send_email(user_email, subject, body)
            
        except Exception as e:
            logging.error(f"Portfolio alert notification error: {str(e)}")
            return False
    
    def send_oracle_insight(self, user_email, ticker, insight_data):
        """Send Oracle insight notification"""
        try:
            if not self.email_enabled:
                return False
            
            emotional_state = insight_data.get('emotional_state', 'Unknown')
            archetype = insight_data.get('archetype', 'Unknown')
            archetype_symbol = insight_data.get('archetype_symbol', 'ðŸ”®')
            narrative = insight_data.get('narrative', '')
            ritual_suggestion = insight_data.get('ritual_suggestion', '')
            oracle_confidence = insight_data.get('oracle_confidence', 0)
            
            subject = f"FullStock AI Oracle Insight: {ticker} {archetype_symbol}"
            
            body = f"""
            Oracle Insight Received
            
            Symbol: {ticker}
            Emotional State: {emotional_state}
            Archetype: {archetype} {archetype_symbol}
            Oracle Confidence: {oracle_confidence}%
            
            Narrative:
            {narrative}
            
            Ritual Suggestion:
            {ritual_suggestion}
            
            Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            
            This mystical insight was channeled by the FullStock AI Oracle.
            """
            
            return self._send_email(user_email, subject, body)
            
        except Exception as e:
            logging.error(f"Oracle insight notification error: {str(e)}")
            return False
    
    def send_system_health_alert(self, admin_email, health_data):
        """Send system health alert to administrators"""
        try:
            if not self.email_enabled:
                return False
            
            status = health_data.get('status', 'unknown')
            if status == 'healthy':
                return False  # Don't send notifications for healthy status
            
            cpu_usage = health_data.get('cpu_usage', 0)
            memory_usage = health_data.get('memory_usage', 0)
            disk_usage = health_data.get('disk_usage', 0)
            api_response_time = health_data.get('api_response_time', 0)
            
            subject = f"FullStock AI System Health Alert: {status.upper()}"
            
            body = f"""
            System Health Alert
            
            Status: {status.upper()}
            
            System Metrics:
            - CPU Usage: {cpu_usage:.1f}%
            - Memory Usage: {memory_usage:.1f}%
            - Disk Usage: {disk_usage:.1f}%
            - API Response Time: {api_response_time:.2f}s
            
            Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            
            This alert was generated by FullStock AI system monitoring.
            """
            
            return self._send_email(admin_email, subject, body)
            
        except Exception as e:
            logging.error(f"System health alert error: {str(e)}")
            return False
    
    def _send_email(self, recipient_email, subject, body):
        """Send email using Flask-Mail"""
        try:
            msg = Message(
                subject=subject,
                sender=os.environ.get('MAIL_USERNAME'),
                recipients=[recipient_email],
                body=body
            )
            
            mail.send(msg)
            logging.info(f"Email sent successfully to {recipient_email}")
            return True
            
        except Exception as e:
            logging.error(f"Email sending error: {str(e)}")
            return False
    
    def send_welcome_email(self, user_email, username):
        """Send welcome email to new users"""
        try:
            if not self.email_enabled:
                return False
            
            subject = "Welcome to FullStock AI vNext Ultimate"
            
            body = f"""
            Welcome to FullStock AI vNext Ultimate, {username}!
            
            You now have access to our cutting-edge AI stock prediction platform featuring:
            
            âœ¨ Multi-Model AI Predictions (Random Forest, LSTM, XGBoost)
            ðŸ“ˆ Real-time Cryptocurrency Analysis
            ðŸ”® Oracle Mode with Mystical Market Insights
            ðŸ“Š Advanced Portfolio Management
            ðŸš¨ Price Alerts & Real-time Notifications
            ðŸ“± Progressive Web App for Mobile Trading
            ðŸ§ª Backtesting Engine for Strategy Validation
            
            Key Features:
            - AI model comparison with ensemble predictions
            - Strategic evolution modules (Oracle Dreams, Curiosity Engine)
            - Real-time WebSocket updates
            - Comprehensive risk analysis
            - Mobile-first responsive design
            
            Get started by adding your first ticker to your watchlist!
            
            Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            
            Happy trading!
            The FullStock AI Team
            
            Disclaimer: This platform is for informational and educational purposes only. 
            Always consult with a financial advisor before making investment decisions.
            """
            
            return self._send_email(user_email, subject, body)
            
        except Exception as e:
            logging.error(f"Welcome email error: {str(e)}")
            return False
    
    def log_notification(self, notification_type, recipient, data, success):
        """Log notification attempts"""
        try:
            log_entry = {
                'timestamp': datetime.now().isoformat(),
                'type': notification_type,
                'recipient': recipient,
                'success': success,
                'data': data
            }
            
            # Ensure notifications directory exists
            os.makedirs('data/notifications', exist_ok=True)
            
            # Append to log file
            log_file = 'data/notifications/notification_log.json'
            
            if os.path.exists(log_file):
                with open(log_file, 'r') as f:
                    logs = json.load(f)
            else:
                logs = []
            
            logs.append(log_entry)
            
            # Keep only last 1000 entries
            if len(logs) > 1000:
                logs = logs[-1000:]
            
            with open(log_file, 'w') as f:
                json.dump(logs, f, indent=2)
                
        except Exception as e:
            logging.error(f"Notification logging error: {str(e)}")

