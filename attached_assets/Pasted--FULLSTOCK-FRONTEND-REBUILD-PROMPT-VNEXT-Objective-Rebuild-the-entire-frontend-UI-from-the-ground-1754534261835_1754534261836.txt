🎨 FULLSTOCK_FRONTEND_REBUILD_PROMPT_VNEXT
Objective: Rebuild the entire frontend UI from the ground up. Fully integrate all real data features from the backend, enforce modern UI standards, clean file structure, responsive design, and remove all placeholder or legacy UI elements.

🔧 FRONTEND REBUILD OBJECTIVES
Fully recreate all pages and views using Bootstrap 5 (Dark Theme)

Display real data from all working backend API endpoints

Integrate Chart.js with real live chart data (no dummy series)

Use Socket.IO to stream live price and prediction updates

Add Oracle Dream overlay system using received symbolic data

Build responsive, mobile-first UI with dynamic gesture handling

Enforce clean UI/UX design with modern cards and minimal layout

Implement service worker for PWA and offline caching

Clean and remove all duplicate or unused JS/CSS files

Support all core FullStock AI features from backend

📋 UI COMPONENTS TO BUILD
Component	Description
Dashboard	Stock symbol input, current price, model predictions (RF, LSTM, XGB)
Live Chart View	Chart.js with prediction overlays, crosshairs, time selection
Crypto Dashboard	Real-time crypto tracking and prediction interface
Oracle Insight Panel	Displays oracle_vision and oracle_dreams symbolic data
Curiosity Engine Alerts	Notification panel for detected anomalies or forecast conflicts
Sentiment Panel	Shows TextBlob/VADER sentiment results and indicators
Portfolio Analyzer	Risk assessment chart + optimizer recommendations
Model Health Monitor	Shows accuracy, retraining logs, current model health status
Strategic Overlay	Highlights Quantum Forecast zones and confidence bars
Settings / About	App version, update status, source attribution (e.g., Yahoo Finance, etc.)

🗂️ REQUIRED FOLDER STRUCTURE
Ensure this layout:

pgsql
Copy
Edit
/frontend/
├── css/
│   └── styles.css (main Bootstrap overrides, mobile, dark mode)
├── js/
│   ├── dashboard.js
│   ├── charts.js
│   ├── sockets.js
│   ├── oracle.js
│   ├── portfolio.js
│   └── service-worker.js
├── index.html (dashboard view)
├── crypto.html
├── oracle.html
├── portfolio.html
├── manifest.json
└── service-worker.js
🔍 DATA SOURCES TO LINK
Ensure real-time data from these endpoints (no fake data):

/api/predict/<symbol>

/api/sentiment/<symbol>

/api/oracle_vision/<symbol>

/api/oracle_dreams

/api/portfolio/<symbol>

/api/model_status

/api/curiosity/<symbol>

Socket.IO live stream for /price_update and /model_forecast

⚙️ UI BEHAVIOR AND DESIGN RULES
✅ Mobile-first, fluid layout

✅ Sticky headers for timeframes/symbols

✅ Card-based components for modular display

✅ Dark mode by default with clean gradients

✅ Animations only when loading real data

❌ No mock charts or static data

❌ No placeholder values or test messages

🧪 TEST REQUIREMENTS
 Charts load with real backend predictions and live updates

 Oracle panel updates dynamically based on backend symbolic output

 Mobile view renders without horizontal scroll or broken charts

 Gesture controls work (tap, swipe for time selection or switching views)

 PWA installable and service worker caches app correctly

 All styles and scripts are in proper subfolders with no unused files

🧼 FINAL SANITATION
Remove any:

old_ui.html, test.js, demo_data.json, or sample-chart.html

Duplicate or outdated files in /static/, /templates/, /js/

Minify CSS/JS where needed (but no obfuscation)

Confirm everything is real-time and no simulation is active