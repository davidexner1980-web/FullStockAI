🔧 FULLSTOCK AI MASTER BUILD + VALIDATION PROMPT
Prompt Name: FULLSTOCK_MASTERBUILD_VNEXT_ULTIMATE_REPLIT
Mode: Silent Autonomous Execution
Purpose: Ensure the entire FullStock AI vNext Ultimate system is properly constructed, validated, and deployed with no shortcuts, no placeholders, and no duplicates.

🧠 SYSTEM OVERVIEW (Preload Summary)
You are rebuilding and validating a complete real-data, production-ready stock prediction system named FullStock AI vNext Ultimate. This platform uses a Flask backend with Bootstrap 5 frontend, advanced ML models (Random Forest, XGBoost, LSTM), sentiment analysis, crypto support, live Socket.IO features, and Yahoo Finance real-time data. All code must strictly follow proper programming structure, clean modularity, and run with real outputs — not simulated or placeholder data.

✅ MASTER OBJECTIVES
Verify and install all required dependencies

Build and validate each backend module

Build and validate frontend UI with live data

Enforce correct file/folder structure

Remove duplicate, unused, or placeholder files

Enforce SQLite for dev and PostgreSQL for production

Confirm all API endpoints return real data

Validate live WebSocket streaming

Ensure proper model serialization and retraining

Run full startup and generate system status report

🧱 FOLDER STRUCTURE ENFORCEMENT
Ensure the following structure:

pgsql
Copy
Edit
/
├── server/
│   ├── api/
│   ├── models/
│   ├── ml/
│   ├── tasks/
│   ├── utils/
│   ├── static/
│   ├── templates/
│   ├── app.py
│   ├── config.py
│   ├── scheduler.py
│   └── requirements.txt
├── frontend/
│   ├── js/
│   ├── css/
│   ├── index.html
├── docs/
│   ├── system_validation_report.md
│   └── final_system_report.md
├── .replit
├── replit.nix (if used)
├── README.md
└── database/
    └── fullstock.db (SQLite)
🔒 ANTI-REPLIT SANITATION RULES
❌ NO mock data or test simulators

❌ NO placeholder charts, hardcoded sample prices, or fake candles

❌ NO duplicate folders (e.g., multiple /static, /templates)

❌ NO automatic simplification of ML models or UI code

✅ Use real Yahoo Finance data for all endpoints

✅ Confirm yfinance returns up-to-date prices and historical data

✅ All frontend charts must reflect live backend values

⚙️ VALIDATION INSTRUCTIONS (Internal)
 Test /api/predict/ for stock and crypto with real inputs

 Confirm LSTM and XGBoost model training executes without errors

 Rebuild charts using Chart.js based on backend predictions

 Run scheduled retraining via APScheduler

 Validate all background tasks run in correct intervals

 Ensure Flask-SocketIO streams live updates to frontend

 Test mobile responsiveness, dark mode, and offline cache via service worker

📬 FINAL OUTPUTS (Write to /docs/)
/docs/system_validation_report.md
Include: model statuses, endpoint responses, chart rendering check, websocket activity, retraining logs

/docs/final_system_report.md
Include: version tag, ML performance summary (MSE, accuracy), UI render status, endpoint availability, environment config

🔁 EXECUTION MODE
Run silently with autonomous validation

Report only critical failures or missing modules

Fix all detected duplicate files or incorrect directory usage

Refactor redundant logic in API or ML pipelines automatically

Rebuild any broken or stubbed modules using current spec

🧪 DEPLOYMENT TEST (Final Step)
Run app.py on Replit with debug=False

Confirm UI displays all charts, live data, and prediction overlays

Confirm SQLite stores historical forecasts properly

Confirm session management, Socket.IO, and chart interactions work on mobile and desktop

Generate final screenshot of UI state if possible